spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3307/bootex
spring.datasource.username=bootuser
spring.datasource.password=1234

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

spring.thymeleaf.cache=false
#false로 해놓았을 때 타임리프를 수정하고 서버를 재시작할 필요 없이 새로 고침만으로 반영이 된다.
#(서버 재시작을 안 해도 되어 매우 편리하다!)
#개발할 때는 false로 두고 반영 시에는 true로 설정해놓는 게 좋다.


#    1 spring.datasource.url=DB경로
#
#    2 spring.datasource.username=DB아이디
#
#    3 spring.datasource.password=DB패스워드
#
#    4 spring.jpa.hibernate.ddl-auto=DB테이블 다루는 방식
#
#    create : 테이블을 매번 새로 만듬. 있던 것도 없애고 새로 만든다.
#
#    update : 테이블이 존재할 경우 새롭게 데이터를 추가한다.
#
#    없는 경우는 새로 만들어주기는 하지만, 기존에 컬럼이 존재하는 경우 같은 이름의 다른 조건(크기, 타입)으로는
#
#    신규생성이 안되며, 기존 컬럼의 삭제 또한 불가능하다.
#
#    validate : 테이블 생성, 컬럼 추가 등을 해주지 않는다. 없는 테이블이나 없는 컬럼에 값을 넣으려고 하면 오류를 뱉어낸다.
#
#    5 spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#
#    ture일 경우, createClob() 메서드 생성과 관련된 오류출력이 되지 않도록 한다. 오류메세지를 보기 싫은경우 설정.
#
#    6 spring.jpa.show-sql=true
#
#    true일 경우, 사용된 sql문을 console에 출력하여 볼 수 있도록 설정
#
#    7 spring.jpa.properties.hibernate.format_sql=true
#
#    true일 경우, 사용된 sql문을 console에서 정리된 상태로 깔끔하게 보여주도록 설정
#
#    8 spring.jpa.properties.hibernate.use_sql_comments=true
#
#    true일 경우, sql 관련된 주석이 함께 console에 출력된다.
#
#    9 logging.level.org.hibernate.type.descriptor.sql=trace
#
#    logging 레벨을 trace로 설정하면, 쿼리의 ?에 실제 들어간 입력값(파라미터)를 console창에 출력 가능하다.